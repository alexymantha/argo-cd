// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationSetSyncStrategyLister helps list ApplicationSetSyncStrategies.
// All objects returned here must be treated as read-only.
type ApplicationSetSyncStrategyLister interface {
	// List lists all ApplicationSetSyncStrategies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationSetSyncStrategy, err error)
	// ApplicationSetSyncStrategies returns an object that can list and get ApplicationSetSyncStrategies.
	ApplicationSetSyncStrategies(namespace string) ApplicationSetSyncStrategyNamespaceLister
	ApplicationSetSyncStrategyListerExpansion
}

// applicationSetSyncStrategyLister implements the ApplicationSetSyncStrategyLister interface.
type applicationSetSyncStrategyLister struct {
	indexer cache.Indexer
}

// NewApplicationSetSyncStrategyLister returns a new ApplicationSetSyncStrategyLister.
func NewApplicationSetSyncStrategyLister(indexer cache.Indexer) ApplicationSetSyncStrategyLister {
	return &applicationSetSyncStrategyLister{indexer: indexer}
}

// List lists all ApplicationSetSyncStrategies in the indexer.
func (s *applicationSetSyncStrategyLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationSetSyncStrategy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationSetSyncStrategy))
	})
	return ret, err
}

// ApplicationSetSyncStrategies returns an object that can list and get ApplicationSetSyncStrategies.
func (s *applicationSetSyncStrategyLister) ApplicationSetSyncStrategies(namespace string) ApplicationSetSyncStrategyNamespaceLister {
	return applicationSetSyncStrategyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationSetSyncStrategyNamespaceLister helps list and get ApplicationSetSyncStrategies.
// All objects returned here must be treated as read-only.
type ApplicationSetSyncStrategyNamespaceLister interface {
	// List lists all ApplicationSetSyncStrategies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationSetSyncStrategy, err error)
	// Get retrieves the ApplicationSetSyncStrategy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationSetSyncStrategy, error)
	ApplicationSetSyncStrategyNamespaceListerExpansion
}

// applicationSetSyncStrategyNamespaceLister implements the ApplicationSetSyncStrategyNamespaceLister
// interface.
type applicationSetSyncStrategyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationSetSyncStrategies in the indexer for a given namespace.
func (s applicationSetSyncStrategyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationSetSyncStrategy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationSetSyncStrategy))
	})
	return ret, err
}

// Get retrieves the ApplicationSetSyncStrategy from the indexer for a given namespace and name.
func (s applicationSetSyncStrategyNamespaceLister) Get(name string) (*v1alpha1.ApplicationSetSyncStrategy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationsetsyncstrategy"), name)
	}
	return obj.(*v1alpha1.ApplicationSetSyncStrategy), nil
}
